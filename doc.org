#+TITLE: Arquitetura e Organização de Computadores I
#+SUBTITLE: Trabalho prático 2
#+AUTHOR: Heitor Lourenço Werneck
#+EMAIL: heitorwerneck@hotmail.com
#+LANGUAGE: pt
#+OPTIONS: ^:nil email:nil author:nil toc:nil
#+LATEX_HEADER: \author{Heitor Lourenço Werneck \\{\href{mailto:heitorwerneck@hotmail.com}{heitorwerneck@hotmail.com}}}
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage[binary-units=true]{siunitx}
#+LATEX_HEADER: \usepackage[top=0.5cm,bottom=1.5cm,left=2cm,right=2cm]{geometry}
#+LATEX_HEADER: \usepackage{mdframed}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage[noend]{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{tikz}

#+latex_class_options: [12pt]
#+begin_export latex

\lstdefinelanguage{mips}{%
  % so listings can detect directives and register names
  alsoletter={.\$},
  % strings, characters, and comments
  morestring=[b]",
  morestring=[b]',
  morecomment=[l]\#,
  % instructions
  morekeywords={[1]abs,abs.d,abs.s,add,add.d,add.s,addi,addiu,addu,%
    and,andi,b,bc1f,bc1t,beq,beqz,bge,bgeu,bgez,bgezal,bgt,bgtu,%
    bgtz,ble,bleu,blez,blt,bltu,bltz,bltzal,bne,bnez,break,c.eq.d,%
    c.eq.s,c.le.d,c.le.s,c.lt.d,c.lt.s,ceil.w.d,ceil.w.s,clo,clz,%
    cvt.d.s,cvt.d.w,cvt.s.d,cvt.s.w,cvt.w.d,cvt.w.s,div,div.d,div.s,%
    divu,eret,floor.w.d,floor.w.s,j,jal,jalr,jr,l.d,l.s,la,lb,lbu,%
    ld,ldc1,lh,lhu,li,ll,lui,lw,lwc1,lwl,lwr,madd,maddu,mfc0,mfc1,%
    mfc1.d,mfhi,mflo,mov.d,mov.s,move,movf,movf.d,movf.s,movn,movn.d,%
    movn.s,movt,movt.d,movt.s,movz,movz.d,movz.s,msub,msubu,mtc0,mtc1,%
    mtc1.d,mthi,mtlo,mul,mul.d,mul.s,mulo,mulou,mult,multu,mulu,neg,%
    neg.d,neg.s,negu,nop,nor,not,or,ori,rem,remu,rol,ror,round.w.d,%
    round.w.s,s.d,s.s,sb,sc,sd,sdc1,seq,sge,sgeu,sgt,sgtu,sh,sle,%
    sleu,sll,sllv,slt,slti,sltiu,sltu,sne,sqrt.d,sqrt.s,sra,srav,srl,%
    srlv,sub,sub.d,sub.s,subi,subiu,subu,sw,swc1,swl,swr,syscall,teq,%
    teqi,tge,tgei,tgeiu,tgeu,tlt,tlti,tltiu,tltu,tne,tnei,trunc.w.d,%
    trunc.w.s,ulh,ulhu,ulw,ush,usw,xor,xori},
  % assembler directives
  morekeywords={[2].align,.ascii,.asciiz,.byte,.data,.double,.extern,%
    .float,.globl,.half,.kdata,.ktext,.set,.space,.text,.word},
  % register names
  morekeywords={[3]\$0,\$1,\$2,\$3,\$4,\$5,\$6,\$7,\$8,\$9,\$10,\$11,%
    \$12,\$13,\$14,\$15,\$16,\$17,\$18,\$19,\$20,\$21,\$22,\$23,\$24,%
    \$25,\$26,\$27,\$28,\$29,\$30,\$31,%
    \$zero,\$at,\$v0,\$v1,\$a0,\$a1,\$a2,\$a3,\$t0,\$t1,\$t2,\$t3,\$t4,
    \$t5,\$t6,\$t7,\$s0,\$s1,\$s2,\$s3,\$s4,\$s5,\$s6,\$s7,\$t8,\$t9,%
    \$k0,\$k1,\$gp,\$sp,\$fp,\$ra},
}[strings,comments,keywords]

#+end_export

#+begin_export latex

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{ %
literate=
{á}{{\'a}}1
{à}{{\`a}}1
{ã}{{\~a}}1
{é}{{\'e}}1
{ê}{{\^e}}1
{í}{{\'i}}1
{ó}{{\'o}}1
{õ}{{\~o}}1
{ú}{{\'u}}1
{ü}{{\"u}}1
{ç}{{\c{c}}}1,
  language=mips,       % the language of the code
  basicstyle=\footnotesize,       % the size of the fonts that are used for the code
  numbers=left,                   % where to put the line-numbers
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stepnumber=1,                   % the step between two line-numbers. If it's 1, each line 
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=4,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  title=\lstname,                 % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  keywordstyle=\color{blue},          % keyword style
  commentstyle=\color{dkgreen},       % comment style
  stringstyle=\color{mauve},         % string literal style
  escapeinside={\%*}{*)},            % if you want to add a comment within your code
  morekeywords={*,...}               % if you want to add more keywords to the set
}
#+end_export
* Introdução

  O objetivo desse trabalho é apresentar um processador MIPS construído com as instruções R-format, beq, lw, sw, addi e j.

Uma CPU tem como principais componentes: registradores, ULA(Unidade lógica aritmética) e unidade de controle.

Para ver como a CPU se comporta com as instruções e permitir uma flexibilidade maior nos algoritmos também irá haver uma memória que a CPU poderá interagir.

As instruções implementadas junto com seus opcodes respectivos são mostradas na tabela ref:tab:procinstrucoes.

#+ATTR_LATEX: :align |l|l|
#+CAPTION: Instruções implementadas.
#+NAME: tab:procinstrucoes
|-----------+--------|
| Instrução | opcode |
|-----------+--------|
| R-format  | 000000 |
| lw        | 100011 |
| sw        | 101011 |
| beq       | 000100 |
| addi      | 001000 |
| j         | 000010 |
|-----------+--------|



* ALU
Uma ALU foi criada com as instruções da tabela ref:tab:aluinstrucoes.

#+ATTR_LATEX: :align |l|l|
#+CAPTION: Operações implementadas na ALU.
#+NAME: tab:aluinstrucoes
|-----------------+------------------|
| Controle da ALU | Operação         |
|-----------------+------------------|
|            0000 | AND              |
|            0001 | OR               |
|            0010 | ADD              |
|            0110 | SUB              |
|            0111 | Set on less than |
|            1100 | NOR              |
|-----------------+------------------|

O esquemático da ALU é mostrado na figura ref:fig:alu. 

#+ATTR_LATEX: :width 300px
#+CAPTION: ALU.
#+NAME: fig:alu
[[./alu.png]]

* Decodificador de tipo

Para saber qual tipo de instrução um opcode representa foi criado um decodificador de tipo para as instruções da tabela ref:tab:procinstrucoes. A figura ref:fig:typedecode mostra o esquemático.

#+CAPTION: Decodificador de tipo.
#+NAME: fig:typedecode
[[./typedecode.png]]


* Decodificador de controle

Com o decodificador de tipo de instrução basta ativar os sinais de controle de acordo com a instrução de entrada. Essa decodificação para sinais de controle é feita de acordo com a tabela ref:tab:controldecode.(Sendo X um /don't care/)

A figura ref:fig:controldecode mostra o esquemático.

#+CAPTION: Sinais de controle de acordo com instrução.
#+attr_latex: :align l|c|c|c|c|c|c|
#+NAME:tab:controldecode
|          | R-format | lw | sw | beq | addi | j |
|----------+----------+----+----+-----+------+---|
| RegDest  |        1 |  0 |  X |   X |    0 | 0 |
| AluSrc   |        0 |  1 |  1 |   0 |    1 | 0 |
| MemtoReg |        0 |  1 |  X |   X |    0 | 0 |
| RegWrite |        1 |  1 |  0 |   0 |    1 | 0 |
| MemRead  |        0 |  1 |  0 |   0 |    0 | 0 |
| MemWrite |        0 |  0 |  1 |   0 |    0 | 0 |
| Branch   |        0 |  0 |  0 |   1 |    0 | 0 |
| ALUOp1   |        1 |  0 |  0 |   0 |    0 | 0 |
| ALUOp0   |        0 |  0 |  0 |   1 |    0 | 0 |
| Jump     |        0 |  0 |  0 |   0 |    0 | 1 |

#+CAPTION: Decodificador de controle.
#+NAME: fig:controldecode
#+attr_latex: :width 300px
[[./controldecode.png]]

O addi tem AluSrc=1 para que o valor de [15..0](offset) da instrução seja somado ao valor do registrador, o RegWrite=1 é para que o valor seja escrito no registrador destino e o RegDst=0 para que o registrador que será escrito seja o [20..16](rt).(figura ref:fig:itype)

#+CAPTION: Instrução tipo I.
#+NAME: fig:itype
#+attr_latex: :width 230px
[[./itype.png]]

Para a instrução j foi criado um sinal de controle exclusivo chamado Jump que desencadeia as operações necessárias para que a instrução ocorra.

* Unidade de controle

Com o decodificador de controle e decodificador de tipo basta juntá-los, o resultado disso é a figura ref:fig:controlunit.

#+CAPTION: Unidade de controle.
#+NAME: fig:controlunit
[[./controlunit.png]]

* Controle da ALU

Cada tipo de instrução usa a ALU de alguma maneira diferente logo foi criado um controle de operações da ALU com base na tabela ref:tab:controlalu. Então de acordo com o campo funct da instrução e o sinal ALUOp o tipo de operação da ALU é escolhido. O esquemático do controle da ALU é dado na figura ref:fig:controlalu.

#+CAPTION:Controle da ALU.
#+attr_latex: :align |c|c|c|l
#+NAME:tab:controlalu
| ALUOp | Campo Funct | Operação |                  |
|-------+-------------+----------+------------------|
|    00 | XXXXXX      |     0010 | ADD              |
|    X1 | XXXXXX      |     0110 | SUB              |
|    1X | XX0000      |     0010 | ADD              |
|    1X | XX0010      |     0110 | SUB              |
|    1X | XX0100      |     0000 | AND              |
|    1X | XX0101      |     0001 | OR               |
|    1X | XX1010      |     0111 | Set on less than |
|-------+-------------+----------+------------------|

#+CAPTION:Controle da ALU.
#+attr_latex: :width 330px
#+NAME:fig:controlalu
[[./controlalu.png]]

* Caminho de dados
O ultimo passo é a construção do caminho de dados. Na figura ref:fig:mips há o caminho de dados. É necessário interpretar as consequências de cada sinal de controle.

O RegDst controla qual registrador será escrito, será o endereço do registrador no campo rd se RegDst=1 ou o campo rt se RegDst=0.

Com RegWrite=1 o registrador que será escrito receberá os dados da entrada de escrita.

Com ALUSrc=0 o segundo operando da ALU será o segundo registrador lido. Já com ALUSrc=1 o segundo operando da ALU será os 16 bits de baixo da instrução atual([15:0]).

Com Branch=0 ou com os valores dos registradores diferentes o valor do PC(Program counter) será mudado para PC+4. Com Branch=1 e valores nos registradores iguais o valor de PC será substituído pelo offset da instrução deslocado 2 bits para a esquerda somado com o valor de PC+4. Porém se o Jump=1 então o valor de PC será substituído pelo valor obtido da lógica do Jump.

A lógica do Jump é de pegar os 26 bits do campo de imediato da instrução[25:0] e esses 26 bits com deslocamento de 2 para a esquerda serem a parte de [27:0] do endereço final e os 4 bits mais significativos de PC+4 serão a parte [31:28] do endereço final resultante.

Se MemRead=1 então com o endereço informado na entrada de endereço da memória é obtido o valor correspondente a esse endereço. Se MemWrite=1 então o conteúdo do endereço informado é substituído pelo valor na entrada de escrita da memória.

Se MemtoReg=0 então o valor indo para a entrada de dados de escrita do registrador vem da ALU, se não então o valor vem da memória.

As consequências do valor do ALUOp é descrito na tabela ref:tab:controlalu.


#+attr_latex: :width 450px
#+CAPTION:Caminho de dados.
#+NAME: fig:mips
[[./mips.png]]

* Validação

Para fazer a validação do processador criado foi utilizado o Mars 4.5 para fazer a transformação do código em assembly MIPS para hexadecimal. O código a seguir deve retornar a soma $\sum_{i=1}^{a0}i$.

#+begin_export latex
\begin{lstlisting}[language = mips]
lw $t0,0($zero)
# cumulative sum f(a0)
add $t1,$zero,$zero
sum_loop:
beq $t0,$zero,sum_exit
add $t1,$t1,$t0
addi $t0,$t0,-1
j sum_loop
sum_exit:
sw $t1,4($zero)
\end{lstlisting}
#+end_export


#+CAPTION: Exemplo de entrada e saída.(Entrada na primeira linha e saída na segunda)
#+attr_latex: :width 100px
[[./example1.png]]
